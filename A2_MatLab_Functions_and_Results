function Question4(~)

	Alpha = sqrt(2)/2;
	A = zeros(13, 13);

	A(1,2) = 1;
	A(1,6) = -1;
	A(2,3) = 1;
	A(3,1) = Alpha;
	A(3,4) = -1;
	A(3,5) = -Alpha;
	A(4,1) = Alpha;
	A(4,3) = 1;
	A(4,5) = Alpha;
	A(5,4) = 1;
	A(5,8) = -1;
	A(6,7) = 1;
	A(7,5) = Alpha;
	A(7,6) = 1;
	A(7,9) = -Alpha;
	A(7,10) = -1;
	A(8,5) = Alpha;
	A(8,7) = 1;
	A(8,9) = Alpha;
	A(9,10) = 1;
	A(9,13) = -1;
	A(10,11) = 1;
	A(11,8) = 1;
	A(11,9) = Alpha;
	A(11,12) = -Alpha;
	A(12,9) = Alpha;
	A(12,11) = 1;
	A(12,12) = Alpha;
	A(13,13) = 1;
	A(13,12) = Alpha;

	b = zeros(13,1);
	b(2) = 10;
	b(8) = 15;
	b(10) = 20;

	f = A\b %#ok<NOPRT>

	condA = cond(A, 2);

	r = b - A*f;
	r_residue = norm(r,2) / norm(b,2);
	r_error_lower = (1 / condA) *r_residue;
	r_error_upper = condA * r_residue;

	fprintf('Lower bound of relative error is %e.\n', r_error_lower);
	fprintf('Upper bound of relative error is %e.\n', r_error_upper);

end

>> Question4

f =

  -28.2843
   20.0000
   10.0000
  -30.0000
   14.1421
   20.0000
         0
  -30.0000
    7.0711
   25.0000
   20.0000
  -35.3553
   25.0000

Lower bound of relative error is 1.925969e-17.
Upper bound of relative error is 2.088024e-15.



function Question5(~)

	n = 1;
	relative_error = 0;
	fprintf('Part1: \n');
    fprintf('\tn\trelative_error\n');
    warning('off');

    while (relative_error < 1)
		n = n+1;
        [x_hat, relative_error] = hat_error(n); %relative error and absolute error are the same.       
		fprintf('\t%d\t%e\n', n, relative_error);
    end
    
    fprintf('\nPart2: \n');
    fprintf('\tn\tcond(H)\t\tlog(cond(H))\n');
    
    n_2 = (2:13)';
    cond_H = zeros(12,1);
    log_cond_H = zeros(12,1);
    correct = zeros(12,1);
    
    for i = 2:13
        cond_H(i-1) = cond(hilb(i), Inf);
        log_cond_H(i-1) = log(cond_H(i-1));
        fprintf('\t%d\t%e\t%f\n', i, cond_H(i-1), log_cond_H(i-1));        
    end
    
    plot(n_2, log_cond_H);
        
    slope_intersect = [ones(12,1), n_2] \ log_cond_H;
    
    fprintf('By Linear Regression we can write log(cond(H)) = %fn%f\n', slope_intersect(2), slope_intersect(1));
    
    fprintf('\nPart3: \n');
    fprintf('\tn\tnorm(x_hat)\tcorrect digits\tcond(H)\n');
    
    for i = 2:13
        [x_hat, relative_error] = hat_error(i);
        x_hat_norm = norm(x_hat, Inf);
        correct(i-1) = 0-floor(log10(relative_error));
        fprintf('\t%d\t%e\t%d\t\t%e\n', i, x_hat_norm, correct(i-1), cond_H(i-1));
    end
end

function [x_hat,err] = hat_error(n)
    H = hilb(n);
	x = ones(n, 1);
	b = H*x;
	x_hat = H\b;
	err = norm(x_hat-x, Inf);
end


(Below are the results of the script running on CDF)
>> Question5
Part1: 
	n	relative_error
	2	7.771561e-16
	3	7.438494e-15
	4	4.130030e-13
	5	1.130429e-12
	6	5.025884e-10
	7	1.367104e-08
	8	6.551379e-07
	9	6.465747e-06
	10	6.634040e-04
	11	7.171209e-03
	12	2.687440e-01
	13	3.079042e+00

Part2: 
	n	cond(H)			log(cond(H))
	2	2.700000e+01	3.295837
	3	7.480000e+02	6.617403
	4	2.837500e+04	10.253264
	5	9.436560e+05	13.757517
	6	2.907028e+07	17.185227
	7	9.851949e+08	20.708350
	8	3.387279e+10	24.245878
	9	1.099649e+12	27.726013
	10	3.535233e+13	31.196386
	11	1.229477e+15	34.745365
	12	3.841961e+16	38.187344
	13	7.490658e+17	41.157603
By Linear Regression we can write log(cond(H)) = 3.476950n-3.654113

Part3: 
	n	norm(x_hat)		correct digits	cond(H)
	2	1.000000e+00	16				2.700000e+01
	3	1.000000e+00	15				7.480000e+02
	4	1.000000e+00	13				2.837500e+04
	5	1.000000e+00	12				9.436560e+05
	6	1.000000e+00	10				2.907028e+07
	7	1.000000e+00	8				9.851949e+08
	8	1.000000e+00	7				3.387279e+10
	9	1.000006e+00	6				1.099649e+12
	10	1.000663e+00	4				3.535233e+13
	11	1.007171e+00	3				1.229477e+15
	12	1.227167e+00	1				3.841961e+16
	13	4.079042e+00	0				7.490658e+17

(Below are the results of the script running on MatLab online, for larger n, the results are quite different!)
>> Question5 
Part1: 
	n	relative_error
	2	7.771561e-16
	3	7.438494e-15
	4	4.678480e-13
	5	3.441691e-13
	6	3.988309e-10
	7	1.539426e-08
	8	5.777080e-07
	9	2.109568e-05
	10	2.773788e-04
	11	2.129638e-02
	12	1.143963e-01
	13	9.452850e+00

Part2: 
	n	cond(H)			log(cond(H))
	2	2.700000e+01	3.295837
	3	7.480000e+02	6.617403
	4	2.837500e+04	10.253264
	5	9.436560e+05	13.757517
	6	2.907028e+07	17.185227
	7	9.851949e+08	20.708350
	8	3.387279e+10	24.245878
	9	1.099649e+12	27.726013
	10	3.535233e+13	31.196386
	11	1.229477e+15	34.745365
	12	3.841961e+16	38.187344
	13	7.490658e+17	41.157603
By Linear Regression we can write log(cond(H)) = 3.476950n-3.654113

Part3: 
	n	norm(x_hat)		correct digits	cond(H)
	2	1.000000e+00	16				2.700000e+01
	3	1.000000e+00	15				7.480000e+02
	4	1.000000e+00	13				2.837500e+04
	5	1.000000e+00	13				9.436560e+05
	6	1.000000e+00	10				2.907028e+07
	7	1.000000e+00	8				9.851949e+08
	8	1.000001e+00	7				3.387279e+10
	9	1.000018e+00	5				1.099649e+12
	10	1.000277e+00	4				3.535233e+13
	11	1.021296e+00	2				1.229477e+15
	12	1.114396e+00	1				3.841961e+16
	13	1.045285e+01	0				7.490658e+17

